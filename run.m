function run(task, varargin)

allowedTasks = {'classification', 'features', ...
    'features-hop', 'features-hop-masked'};
assert(ismember(task, allowedTasks), ['task must be one of: ', ...
    sprintf('''%s'', ', allowedTasks{1:end - 1}), '''', ...
    allowedTasks{end}, '''']);

dataset = load('data/data_occlusion_klab325v2.mat');
dataset = dataset.data;

%% Args
argParser = inputParser();
argParser.KeepUnmatched = true;
argParser.addParameter('dataSelection', 1:size(dataset, 1), @isnumeric);
argParser.addParameter('featureExtractors', {});

argParser.parse(varargin{:});
fprintf('Running %s in %s with args:\n', task, pwd);
disp(argParser.Results);
dataSelection = argParser.Results.dataSelection;
featureExtractors = argParser.Results.featureExtractors;
[trainDir, testDir] = getFeaturesDirectories();

%% Run
switch task
    case 'classification'
        featureProviderFactory = FeatureProviderFactory(...
            trainDir, testDir, dataset.pres, dataSelection);
        featureExtractors = cellfun(@(f) featureProviderFactory.get(f), ...
            featureExtractors, 'UniformOutput', false);
        classifier = @LibsvmClassifierCCV;
        runClassification(dataset, ...
            'dataPath', [fileparts(mfilename('fullpath')), '/data'], ...
            'dataSelection', dataSelection, ...
            'featureExtractors', featureExtractors, ...
            'classifier', classifier, ...
            varargin{:});
    case 'features'
        images = load('KLAB325.mat');
        images = images.img_mat;
        computeFeatures('data', dataset, 'dataSelection', dataSelection, ...
            'images', images, 'objectForRow', dataset.pres, ...
            'numBubbles', dataset.nbubbles, ...
            'bubbleCenters', dataset.bubble_centers, ...
            'bubbleSigmas', repmat(14, size(dataset, 1), max(dataset.nbubbles)), ...
            'featureExtractors', featureExtractors, ...
            'trainDirectory', trainDir, 'testDirectory', testDir, ...
            varargin{:});
    case 'features-hop'
        savesteps = [1:100, 110:10:300];
        featureProviderFactory = FeatureProviderFactory(trainDir, testDir, ...
            dataset.pres, 1:length(dataset));
        featureExtractor = HopFeatures(max(savesteps), ...
            BipolarFeatures(0, ...
            featureProviderFactory.get(AlexnetFc7Features())));
        weightsDirectory = [fileparts(trainDir), '/weights'];
        if ~exist(weightsDirectory, 'dir')
            mkdir(weightsDirectory);
        end
        computeHopTimeFeatures(...
            'objectForRow', dataset.pres, ...
            'trainDirectory', trainDir, 'testDirectory', testDir, ...
            'weightsDirectory', weightsDirectory, ...
            'featureExtractor', featureExtractor, ...
            'savesteps', savesteps, ...
            varargin{:});
    case 'features-hop-masked'
        runMaskedHopFeatures(...
            'objectForRow', dataset.pres, ...
            'trainDirectory', trainDir, 'testDirectory', testDir, ...
            varargin{:});
    otherwise
        error('Unknown task %s', task);
end
end
