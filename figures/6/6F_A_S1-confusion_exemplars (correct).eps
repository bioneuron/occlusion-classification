%!PS-Adobe-3.0 EPSF-3.0
%XpdfVersion: 3.04
%%Creator: \050MATLAB, The Mathworks, Inc. Version 9.0.0.341360 \\(R2016a\\). Operating System: Windows 8)
%%Title: C:/Users/Martin/AppData/Local/Temp/tp3e85097d_2483_4c2c_8760_db130906f8ee.eps
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 360 271
%%HiResBoundingBox: 0 0 359.75 270.5
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.04 0
%%Copyright: Copyright 1996-2014 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /pdfDuplex exch def
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      pdfDuplex { /Duplex true def } if
    currentdict end setpagedevice
  } if
  /pdfPageW 0 def
  /pdfPageH 0 def
} def
/pdfSetupPaper {
  2 copy pdfPageH ne exch pdfPageW ne or {
    /pdfPageH exch def
    /pdfPageW exch def
    /setpagedevice where {
      pop 3 dict begin
        /PageSize [pdfPageW pdfPageH] def
        pdfDuplex { /Duplex true def } if
        /ImagingBBox null def
      currentdict end setpagedevice
    } if
  } {
    pop pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr {
  4 2 roll exch 5 index div exch 4 index div moveto
  exch 3 index div dup 0 rlineto
  exch 2 index div 0 exch rlineto
  neg 0 rlineto
  closepath
} def
/pdfImClip { gsave clip } def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 2 lt {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%BeginResource: font HZAJIY+Helvetica
%!FontType1-1.0: HZAJIY+Helvetica
12 dict begin
/FontInfo 10 dict dup begin
/Notice (Copyright \(URW\)++,Copyright 2014 by \(URW\)++ Design & Develo\
pment) readonly def
/FullName (Nimbus Sans L Regular) readonly def
/FamilyName (Nimbus Sans L) readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition 0 def
/UnderlineThickness 0 def
end readonly def
/FontName /HZAJIY+Helvetica def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox [0 -218 859 741] readonly def
/StrokeWidth 0 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 37 /percent put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 67 /C put
dup 72 /H put
dup 78 /N put
dup 82 /R put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
5AA4F71255501637F1A431BAB555283D093E1B588B45B0281559110D21315C62
BD638C6B34BA54AA75227715D9947EBCD51A104CAEA657499E94138F5645BF68
368BB1B1EC8E4776F067FFF2CE9B89FB7E63A7DB304498C1036D399C47A4CB79
BD517EDB02BEB90195FD7DDAF3E839BCE2DB156D9337DBB2305A465B3E0FFB97
1985C79DC71C47E26F9F0F042B2CDEE97B679358059256FB93D662D43C7ECB5B
1A564DFCECB963478373C69F52172F071E0AA6082A3E10D9E1CE2851CFA210EE
7BD5FCB1AAE15E89D1FB339D587D218B89C18A32F47C7451A80CB1FC07CF5EF6
FB39B30D1F8747CF302EAFC179F06E5D11CA91B74E937CCBD27A32CB3BCF5FE6
C45D34D885BFB86FF350A90A5782FFBE48234DAA06C5D150B2EC09D77404EC3D
B43160154612D64E10BACD89A617F4DEA98A315408AD9D54BEFC25C4416E4A72
6632CCC5C9AF2C341A0AE136E29843D68B1251F5FA845C13AC8B7DE251BFFEA8
A8EDD813DCEE74501D2E689B7E24D26500F2D6EE48A8B8000CB839582669CE55
2E2326EC60875EE39AF01AD6CB90C35E45C7457BC5D84AA293C19D89799F7AC8
BB5E75C231F0E1622C9BA10958335ABE90053C9B9FF036935412419038D121C1
82673107B6C15F698D0E38F9F69B52EC15ED9B054FF12A05B4BD94D629FAE709
B075D86F5574F3A857F302B3A345D5A371E0DADE0B29BE3BC958A0713A151DB0
BEB8D50EDCEBD0431C33E62D7AC453562DC94FFF2C249C19F40E83C5667C1A8C
780C3D922B95563016D551FA73B49D7E1A5128A08A5743E32EFE668AF50F198B
6FB2E58F8582D2975BCA921C71060C167A369746AE809184F087DB9ED966F8A3
E8C051589C4477D29A83B709F6538F88A4216D2DD334CDCFC1F03F7EB49BE022
37C2EF088EDB0A84FA09C15D236DA3A502056CF59E636B3EEC85CE42AF15054D
17561E0D92398DEC3E3EDF71E45C21B7C9C7E8FF35241E81056D46D2ECE476C1
D3A3A42D8DE836E30E85A30878D22586DAC26B64D0692864047E7509908AA0B2
8BD56E0C37F685EFD704EB9959201C28AF7E1DB7482E41E95B9F399C44F977A3
F1AA2BBC857C9E0758B7538146CDAE50A9958A6579C99DC61B7186438D9A1E4D
F4CBF8A55F07A720143F56D59EB2E481B5CE1791F1F5038A6D381581A124A695
3EE80374C90266BBA994EF4B154D9188CBA5981A2DB8F49FB4EE1ADD1370C962
3AC15180951919E7AFE361528AADBD9E0FCA88DFF7781CFAFB3594DBF8262A32
9BDD42CF32D204507DCEA83BDB41AB58CB089EB04DC6E7579681C0BEACADBD3A
64661E23BA69D43F8A5A61AABC4CDAF690FE5A2D0D9573DFD01765B7DFCCCAB5
583C5C619F92A05DF02307DC03D2842A357805CA286E7E3F255A1CA0E0421437
1C0CAE884CBA448BE291549B2AB3AEDAA42C4FE0CA3BF8D475CCBB31AE63622E
5E18763CEFA58B60458B29F4D4DCC9E00CB7E7BB35839B70BD32D52BAE121D42
2D3AACA7256227F3EB0A156B7747E6A78A088933BB5CD5E563D549C85D20C9AD
067A47FBD8762FAAD66C64CC1FF01B365FB35054E2C4A428D406FB8C0AF984E3
3FA25E524D2026F87C5F1F88D02022E2256568E641CA358BF905744ABE63FE06
F9B065637085D6FAFC89A882F6F4A514234A189834971E671A26F665CEC0AD04
7BCF953C1F820967A96A5EAEE41E4310001BBDE077F319644E656398E3582BE4
C8D2F56E0D3BA890814D89C3638332BC2FC07575C644AC19A9342BC3685EAFDA
BBB9CE9523B721A41BBE6F1F034E1A943A3A58CB45266252F16E39CB1312D2CE
AF544F42D85FEC0596F05C0C016465CD4421AAE4007436F60DA2910F30AC36C7
053F40C14BA08592F0F6CB33CF7C9F5A96FB8B72CDB59FCF91A25FB991291F46
C1009DCF14C608047553E4D990DAD88EC492A9B4B806CB708611CD86CD91990E
05941E18D6547E82AC3B8FB9DCF5DAC446664823ED27C111981927E2647AF20A
C0255C2BA6A1F2FCED3A8E4641ABAA8F1E8D51B2E61469F449BA3B8F19CEB86F
3A0CABA5E90D4F8A01F0245952CF50C0E2E44DF9B99110124E3B966264E4AF59
16514E20A98CF293EE5C9451C0362BAF7CCB5E01245028796C74227D73C7E7FA
65032B62C977E9FAEBF37B731E35BDB801E50D75326E7FE05785BA14A89957AD
8F65E35DAC70AFC2022238EDBFD7ED753423EAAC398F1CE3772481DF295412B9
D472C4AD3AA1844D658E1C2957CDBA014769B40F50FCB3B16969D3CCC3FB2419
68A4A09DCB29DDA623EE56A51F70594AEA5DBDF9D2D81486406825467568F3A2
EBDCFE8999B2D4832EE19D6CFEDF499F1ED1EB9CF62AA683A371D8D426D0FA2F
9B44E01D59FB8007D329F8D3C2838B583350863CE7E8E783D983A1AFB647B380
FE777855574174992F7EE87F19B00FC29511A778F4FAB0177E73C633785775A8
6F9BC9C67CBC8D737DFE27CE02209BB8A24FD548CF8361764951B17D9359AE31
427A8E9B0D9E74569210EBC552E93D89CAF78F3AE37E050928DFEC186CD04FBD
85A56E74A7CCA9D970BAE6F7B552C0C1DB7344F9FC2D7533C7BC27E9981F4E49
C576527A5D21DCF325685CEC1A001BF5C9E8483DD45EA6C9C092A657DD9EBCF4
D9A4625DA6E9DC44C0E86D62E31C77DCD2B7955DE26C390D379F8F41B10DB6A0
71881DFA82BBB69C135B1CD3B617E3E7CA8B0D17D6168718E378DED70E045287
65577F6CA778FB33D828D41FDB1AE4180FCB5A48F1540D2A67830FC41BA0F8A6
283A773BD1D5BB27953F895B69B814F9A6660A5D61BC0E71BFCBEEB1BC6AD56B
1FE113D31A539AD11AEB470572FF5C2F79F3B08FB12E74079D83D381490C5D70
7946257AF1CAE48C92D28883D4EA081F336C26A4F884EEAEDFEFAF7AA44CD725
35350B06780DB20203C3BA6649094D80B290A7D9E4A8866190758DBCDE2D694E
80E48851F44910E35FE7DDAE10062F1AD082EC8962AE0726580813DB06973A51
CEE178860E353CEC2FF10EADFDBDA0A96338801B5ED9A43056B6943EE0BE5BD7
A123B0960794352207CC25DD11BA8090D644B8739D229D9E60D722085E6F3B5E
C80671EFC962FF21996A308813413F4A09DC4FEE4103201B1CD2B0C642C7CEF9
8B08C41E19F30035B22041227F692655FBDB07295B7515F30550701288EFD6D7
6DC9EEE377854B8CA0335252A9274E9D8DE12B3379314195B15461EA683F5E00
F8FDBD5BA3AD5927F3098BABDA1C5B095A6CF9056D7910DF8161E19D1CE5B5E7
422CE005277438DFD3E52808BF5C6551CFC05451386B5181FA883A0A8B0EC642
A1F2252B5CFAA44BD78AF3391CFB9A56F0F02345B93A5898D13F52DA017D1DBE
2DA2C4988E45281BC20F1376BDBEF543015D224E0741CA6B5460168C185965E4
4A8A43DFA1B7734DFC7B56405950FF0D671BB8B127EE30F9CA197F10D048894C
4A58A79DB47B1DC652FBF82333CC82377F2FD465C3F660A1DC64BB23BFE921AC
BD0FB0F539F787C5683A4A888662BBD4DF8DC0A0D5CB0E6A25BFDC91505913AB
A51F1151737D67A25492E842D35444AFC377A97BD45F959DE8D88FC7369927FE
2670189030B8F7F10E5F05918B87B02E4D56B7C31AAFF4EB44F0CD5351B05C05
CD1F01B069F5AB5FDFE26C8369270E15721C6DF681D2F02F9B3DF548FFD26CC9
E67539A5464269904C1C3A02F6F1F61366349BFFDD772F786B7016065E7198AE
2B6C3DDB4BF66859DB3566B81D701B814C61DB352C7353B6F9BFAFAD8A3911F6
A8F80B7EF78D0414B39E974E14CE3CDBA9996628840E3D17048D10C669C2B0B2
E76C83E3B67B6574767550C61A75F9503C00F6D7BEF59CC94B7F0C02420D224A
EA4F7A896B7BFA3F6BBD331CE0E502894290ABB14074F8F1240F1FDDE08BECB1
E5096709BDFFE2926525C09338EF0A3A57DA662F64F162AD764E328B8151453D
53131F7A5420581585DE6A9E17D2EB4AF38E0A3D107F7AD23B96D1D85C151734
3B2FE6478B217835E4B60E20BB1568A67401C479195FF987BA0D7A23AF31199B
4BEAA0A2AEA840F6294E72E4EB4CE4E31B0F4C096C96FBC36FB05E5FBAED632E
48F3F646A135DD3180771BCA305FD19FC23E70626F24ABD28972C4F867F29A55
F976B2FD95D560A09ED00D674371E74B6061564004DF5E06734EED420D4626A5
FA30FFB27D3812FAEE661F549AFAFF3DA2A0B78CFC0375B9EEAF0AD600EF54FA
73FB55D6EFE30430046798648877983A0E28FAF1FAFE5E072AFC2FB029B9944C
00DC755AD63A19E90F1DF8332720EEF8AB6C88CECB9BAD9503F53C25B327AC51
4861E57CEE127E9105E1DDF1EC1D4666F036C33FA031B3F5304AE3CC9EB2CECD
1A59F16500A43B4373E1B836847BBBABD055C4D450CA6B8E46260BF139BFB492
B20FAE271DC97424E3DB216D2F893FD71657F66E5DC1491308E421E793C35E78
5AEE20AF58F8122F1569E8BEAA0F2267D89B404ADF811479F7A075F211DD3BE2
E582525D6195F02E753CE4883DBE05769DE72910903D37283F898B019599D69C
34421AF73792A99B3E808D98372CEAFE94152A38053DF487CEDAEFA9A3A14F93
E321DF9B086ED7D3979630882D8C04F039DAF47AC9A5CF63D7D696C2FF86693A
69285925AA008A121BAA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndResource
/F12_0 /HZAJIY+Helvetica 1 1
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /grave/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/bullet
  /Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
  /circumflex/perthousand/Scaron/guilsinglleft/OE/bullet/Zcaron/bullet
  /bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
  /tilde/trademark/scaron/guilsinglright/oe/bullet/zcaron/Ydieresis
  /space/exclamdown/cent/sterling/currency/yen/brokenbar/section
  /dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
  /degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
  /cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
  /Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
  /Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
  /Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
  /Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
  /agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
  /egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
  /eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
  /oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]
pdfMakeFont
%%BeginResource: font QJKSXK+Helvetica-Bold
%!FontType1-1.0: QJKSXK+Helvetica-Bold
12 dict begin
/FontInfo 10 dict dup begin
/Notice (Copyright \(URW\)++,Copyright 2014 by \(URW\)++ Design & Develo\
pment) readonly def
/FullName (Nimbus Sans L Bold) readonly def
/FamilyName (Nimbus Sans L) readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition 0 def
/UnderlineThickness 0 def
end readonly def
/FontName /QJKSXK+Helvetica-Bold def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox [0 -218 824 729] readonly def
/StrokeWidth 0 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 44 /comma put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 61 /equal put
dup 72 /H put
dup 78 /N put
dup 82 /R put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 116 /t put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
5AA4F71255501637F1A431BAB555283D093E1B588B45B0281559110D21315C62
BD638C6B34BA54AA75227715D9947EBCD51A104CAEA657499E94138F5645BF68
368BB1B1EC8E4776F067FFF2CE9B89FB7E63A7DB304498C1036D399C47A4CB79
BD517EDB02BEB90195FD7DDAF3E839BCE2DB156D9337DBB2305A465B3E0FFB97
1985C79DC71C47E26F9F0F042B2CDEE97B679358059256FB93D662D43C7ECB5B
1A564DFCECB963478373C69F52172F071E0AA6082A3E10D9E1CE2851CFA210EE
7BD5FCB1AAE15E89D1FB339D587D218B89C18A32F47C7451A80CB1FC07CF5EF6
FB39B30D1F81ADB02AFD41D295F22680AF66E9F4314EA52B3CDE51C3F275E8BD
F449819374352A4CDA4FBE0647CC592F61F10862B0FACBE06D3E5F81E8E2DDE2
27CF0E6606FA733BDA45078A751B77D9CB0D608D8A4013A2EEB0F7A8310CD1E9
21FADF98936D1350D63463D5AB6D8CEE71D4A5793FACC2AD0B48AD529DD848E0
0D624066783B2522C63341B75A5257A7E5A245A0ECE6AC5B2B44D9637EDCDF42
3C9EA8CC6A20D90470EDF2CBF3709CB10A0042170ECAF42267DC5688EB86CAAB
3CACC90E2F10AEF59BABB593A19A50AF32FC478E3FF50C43BC221DD7B4D57C73
7E849356490FA29049B0471ADC22B818FA3231740CB600F51B27205DD08A9A25
92AC0CD633E817BD56B40F903FBC108B3D3486311E6DE886C046736DD9D616B2
6FB76926D953170D093C9F317486A7C0D6C7328719BFA477B12882DE44D1B41E
E922B0FAF59763D791D203D429204E23A0365021F81B476DCE1D67E214D3A5B1
A8EA7D4F2BE559BFBC9F66F5B534BE4D17CA9718002E25BACE6DB3B438E96867
9C43C0C71ACD3095FD014B2271FA5FC4745C62F871F763CEAE5F188461848E54
679A47FAFECA16B210A28E90E48BF68CD0CCA9AA9C9A46E9C032F25D959E897C
9DBA56C210964CE2A602BCD518879076E96762FA6C5EA6BBCD6CE40A81409D60
B06C3CE41E5D5ADE415C73427753E66D26D35894E5C265D330E0CB9475DA266D
5B72CDF1AD035017F1FAE69B085042C88903D7ED1A1324CD5E9DD8D69A853981
AAEA74E27A2550A4EAB0954496F6C339B671E3BCE7BD7FF068F4DD13BCC263E8
6A4B234124CDFF2AE5D99C7731409936E1243074F25C3FFEDB8CE0117A458947
BED2BC4BE540F75DA7D464DD80B2CB3197974887B5373A2BB9D2D48C1B2FA1F7
A1D7D3CDAA9E54A4658F18C560849638167E936AAF663CEE3C11A715792D25E9
48B81D394B3C3C49CA41B0666DE2056B58A9D6D289ED08CBF09CC4470C1C418D
AC4F933C547D44B8303B050FA95E9150B07E7F942C0A6A6FECA21628678298B7
909432EE853E0042A1B0601FD2DCBC02C93D102893DAD7F7BC33FA9254750368
A9F776FF88EC887B293B131A087C1E05F23EA37ACEC0205393C132E8717CBC02
4C1CAD4DD07749F8464E00A222E392F685F90F19A77D99224B796F15A0F0D18C
55888CAC34CA5F5D1B7D21D9C428367139595B4417CE2D727243068348D688DC
FF1F1C2CFE27689E0F257DCEB4F39BA91B0CBBAC7CB9A9081A10EA444D95AD41
686FA8EE6C6F38EBD35560CE44EACC5F1F56301DDE40A8C1DD453ED4F9B806B6
AF2A99ACF05737B51F34936D18E24E8B9352A14F2312FEE7907D23F65B13C027
155EBA3A62CEA2097F5ACD2C121D08C0F187F56665441DDEE1636B3E25470324
561DAF964E5CD62CE12FDAF7BCD86DF4B2A558D33B1C51EA4EFEB47741399690
75E6F3B8ACC6DBEC2441DC4DE157E4457E50E47CC4080681CD5335208310282A
FF67A7832136045EE32680EC08D11ECF4350F683D02736D6CC31A3D2AE67D4B8
358A0519B8DED941C4F5505DDC759B1B30E1AABC69B2E250A52CF105958874D8
99D0A69BE3D22D764FB41000A4773B7B954A8A55B807AE3D28C6CAE60BC52F9F
A067F94B0E1CC468BAFE78857B3AB465F5E28387A956AA9F341FF670270B5BC6
DBBE400856347830378D7A88ECFA233147C0AAD16D469A69E88EB98AA3C911B9
F4B46746475E4229C1AD2583A739815A812FEEBCC768C0E39109C9C3E9A483CC
6B614C047B5AA416A86285C061C57B2C9909BD3B9928DD4313E1747A8405B22B
94FFB2504E39FE7F4893F5EC9675BAC6282E98938B5D8E21693AC9939568391A
19353A5F69901B17C67CF9D801A293F46304A609658297571280C8D9AB83BC56
F5BB5E4EA45FA5D8FDA98ADBB69E3E35F487DB22C30BA49B09ED3992E8873B94
1CC72CA1CFFDE169680F5ABEE6DA0514073239262FFEFC42BADD06790007838E
0D1C2DBAEAB7C2D07C3E557200DEE274B461A3FF260625F77D4A8F10E2946D68
DFB6445ECE7DE744AFAB54F81234BC162DB17B7A27DE5CD5B109A8CD3AA1954A
70481232BBC57ECCFFA190E89DD12CC989F1B4B9A74316DBBFA7A546CE7CDC3A
363C7A0A66A1CAB83B7ACC05CD9DB830B69C3238B5ACDED928453510F8D91726
EF061806329BAB7AC285BD885DCBE98A4FF2CB7AA2596EADEA7F2DF64B2F7C19
1CC3775B149D43BCFFF3267B78D2321AAF74CB3A573B4C323D7820910FA5914B
3E8EE7EC0282570809C93B1ACF449CDD117DD27B258011980DE1DE2507D388AC
CBC70DF469A279FA0D574DAAA8D6AB4DD76D2C6239DDAF0FEDFC6CBD6A696EE1
79E190D7D1FAFFD0AAF92E2C4490D8538562CE26D5B3606A8A8EB614A2A1AAB0
41F3FF85A59153E9A9C92C51EE8AB5F4D82F887D72CBD61D5BACE80CE323DFD0
32C364025E73A10BD0DD8E1307511C544DE21E9FFB83E05BCECEF73A44BE8497
19EE4320E9303EAD66BA2B2C8575E05F31EE06F6E42ACBCB2CEB70BC1B10178E
9D646F6D9AD88464DF8D359AC1ED022536293880FD2B87E6AB4DF8B9E87832B7
FD0D9465299DC07FD59CE80FFE867B773CBCBC6A9F76920638CDD7FF99461F73
BE15794D25477B8154B0D520DF9EFC5711EE213464F4B1BA79D6B7D646536D12
3FA7C6AF60067A91BC28DE56CE9CE17CACFC504A0878516B06E1C8584B0DC392
D7E91A1CCD54C023C44D871FB21BA1F32FC02322CF7BE445D0767A79E6577424
96103A9CB30D5F38A1642D86519AD355FFDD8429C6B98C89F55591A3A3AA9FCC
4A1C4B604D0994CC7A8E3813647ED2B7DE855FA7A5F5E43331B0D9257D813C96
20A96E5DDC8374F5950302B49C01B930F66D6B0A0C6F232FE6692928EEDBA986
FA2799FF2DD91D486E96F7F76CDBA9794F9BC8CBAF90E5ED870EDB160288F043
B748B853D37774FCD849C435B6DD578BF8E080B8C6BC243A82909F224C219A6C
BCEE55EE7CAA99E056AF840F3D3EF161499BD08FAB3A5DDD2DF1B414D8A75078
7D87501A50D0CAF8A067C177AA14DB3CD8DAA5B9D171EB0E70D7D0C87AEE552A
9F728696E89827E972E1F898EB2F94174EC1937BEB88EBA179F24D99A4AB1EB3
D20B1A2CC6448EFB6EC827FC830E51723F8654CFBFD15F45837386988A62A828
6C895449687A7AAF14C472BD4BC23E7655D783011B967C119F8D8C81DEDA6DDD
4A654F17BDCB37A6491693D4AA997D4178C2B3621A8282CDBDACBD4F3CC69F20
FC6D3A8FBA880710E4297402BB8E8537611CC0D6835091F1F46388CD371B74D5
97402CC6CC2D84E92C206B210C808D38D1902E9DE6F7A07A5B75EF858FEDB5A3
864B6E159D663CEBD1FD6C64889EB2E0AE50C61FA75DAAAA9370DC25A90ADF1F
37DFBAF2326474454B4B0DE218B43497F6C91E9FAD809B8E958C7EF639C3DBD8
0A080EAC8AB6D5048DFF8BBC9D9F07049367F4327B9AF983A54D8A86CDB36A56
00CFEABE77F747F7C105084FAC0BA2B79224C341EE0861038B7CA0812E4A9CDD
DF88130E3B34003ABEEB12523149A2D179E1F44A30AE7826E1473FD3F3DC4E30
9D15FD97189B812FCB02087EAA3A62D6CEDD6027FA65B3E74BA694358DF0F873
DF3B52CCD3E874EF1DF581C5557DA2075AD00A6339FF106095E62F872A4FA2DC
0F68D24E54BE31FE24BBC401B87DBD4C05C74E1ED8ECEDC846637A7EE07B99C0
0569A4269C67104259181F920B66A86F37B15EAD07D6FDE1E9125483F829A8F5
065F53816C850809889BBCE8D0430E1E66D5A3097CD7CCD1F6A9F8C59A4BDBF6
C7427FF9080394ACF03B94E16C8DA517C67703F76782603BBA8C71FC4B51448A
DDFCC33D3BFCAC4F1F6923642A544E6355325996C91458780FF3064E334476B5
EA45284875263B0AF1B32C3FD823F8914FBC7B692BA0967A537737438A71FF75
DDCADD491D340BAAF7FA57F4E8F34AC6D38D7D06882F9AD4DBAFE5A6A24EC35B
BD04BA3033DD53D86A8F5A56525DF1EE4907573C651AD0C23811CA8003A0B7B7
08C11017702F1BE9C30DDE1A3C3008B40950E230091B59FB28E8D13C18E15957
789A2350536D39D3D89EA57D01D1D8FCE16D6C733286078E371D029A95FAAD62
924CB8237CB89A062C7821C868BB35FD65D81B6F9E503AE53C28CD15630AFAB4
ACE25F70
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndResource
/F9_0 /QJKSXK+Helvetica-Bold 1 1
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /grave/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/bullet
  /Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
  /circumflex/perthousand/Scaron/guilsinglleft/OE/bullet/Zcaron/bullet
  /bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
  /tilde/trademark/scaron/guilsinglright/oe/bullet/zcaron/Ydieresis
  /space/exclamdown/cent/sterling/currency/yen/brokenbar/section
  /dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
  /degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
  /cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
  /Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
  /Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
  /Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
  /Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
  /agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
  /egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
  /eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
  /oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]
pdfMakeFont
end
%%EndSetup
xpdf begin
pdfStartPage
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 359.75 270.5 re
W
q
q
[0.1 0 0 0.1 0 0] cm
/DeviceGray {} cs
[0.9394] sc
0 0 3737.5 2830 re
f
/DeviceGray {} cs
[0.9414] sc
0 0 3737.5 2830 re
f
/DeviceGray {} cs
[1] sc
265 1517.5 247.5 720 re
f
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 15.25 261.563] Tm
0 0 Td
/F9_0 11.0002 Tf
(RNN, t=0)
[7.942144
0
7.942144
0
7.942144
0
3.058056
0
3.058056
0
3.663067
0
6.424117
0
6.116111
0] Tj
Q
q
/DeviceGray {} cs
/DeviceGray {} CS
0 w
265 1517.5 247.5 720 re
W
8 dict begin
/FontType 3 def
/FontMatrix [1 0 0 1 0 0] def
/FontBBox [97 79 130 175] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding 120 /x put
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 1 dict def
CharProcs begin
/x {
33 0 setcharwidth
[0.1 0 0 0.1 0 0] cm
q
970 790 330 960 re
W
q
[330 0 0 -960 970 1750] cm
/DeviceRGB setcolorspace
[<~J3Vs_fHFi8qLg;+7bD2h)utd7@SdU~>
<>]
0
<<
  /ImageType 1
  /Width 3
  /Height 3
  /ImageMatrix [3 0 0 -3 0 3]
  /BitsPerComponent 8
  /Decode [0 1 0 1 0 1]
  /DataSource { pdfImStr }
    /LZWDecode filter
>>
image
pop pop
Q
Q
} def
end
currentdict end
/xpdfTile0 exch definefont pop
/xpdfTile0 findfont setfont
fCol
gsave [7.5 0 0 -7.49996 -462.5 2830.5] concat
0 1 1 { -33 exch 96 mul m -1 1 1 { pop (x) show } for } for
grestore
Q
20.0025 w
1 j
/DeviceGray {} CS
[0] SC
430 2237.5 m
430 1517.5 l
S
265 1757.5 m
512.5 1757.5 l
S
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 29.3875 207.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(13%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(14%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -48 Td
(27%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[1] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 37.6375 207.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(39%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 37.6375 183.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(34%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[1] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 37.6375 159.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(73%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 48 Td
(52%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 24 Td
(48%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 0 Td
(47%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
5.0025 w
2 J
/DeviceGray {} CS
[0.1489] SC
265 2237.5 m
512.5 2237.5 l
S
265 1517.5 m
512.5 1517.5 l
S
306.25 2237.5 m
306.25 2230.3 l
S
388.75 2237.5 m
388.75 2230.3 l
S
306.25 1517.5 m
306.25 1524.7 l
S
388.75 1517.5 m
388.75 1524.7 l
S
/DeviceGray {} cs
[0.1489] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 26.875 230] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
-103.021 TJm
(C)
[7.21982
0] Tj
-6.375 14.5 Td
/F12_0 11.0002 Tf
(Human)
[7.942144
0
6.116111
0
9.163167
0
6.116111
0
6.116111
0] Tj
Q
265 2237.5 m
265 1517.5 l
S
512.5 2237.5 m
512.5 1517.5 l
S
265 2117.5 m
272.199 2117.5 l
S
265 1877.5 m
272.199 1877.5 l
S
512.5 2117.5 m
505.301 2117.5 l
S
512.5 1877.5 m
505.301 1877.5 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 15 207.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
0 -24 Td
(C)
[7.21982
0] Tj
[0 1 -1 0 9 175.375] Tm
0 0 Td
/F12_0 11.0002 Tf
(RNN)
[7.942144
0
7.942144
0
7.942144
0] Tj
Q
/DeviceGray {} cs
[1] sc
827.5 1517.5 247.5 720 re
f
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 71.5 261.563] Tm
0 0 Td
/F9_0 11.0002 Tf
(RNN, t=1)
[7.942144
0
7.942144
0
7.942144
0
3.058056
0
3.058056
0
3.663067
0
6.424117
0
6.116111
0] Tj
Q
q
/DeviceGray {} cs
/DeviceGray {} CS
0 w
827.5 1517.5 247.5 720 re
W
8 dict begin
/FontType 3 def
/FontMatrix [1 0 0 1 0 0] def
/FontBBox [172 79 205 175] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding 120 /x put
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 1 dict def
CharProcs begin
/x {
33 0 setcharwidth
[0.1 0 0 0.1 0 0] cm
q
1720 790 330 960 re
W
q
[330 0 0 -960 1720 1750] cm
/DeviceRGB setcolorspace
[<~J3VsdkT]j3eq=VY5R:ia*!D'),#Ag~>
<>]
0
<<
  /ImageType 1
  /Width 3
  /Height 3
  /ImageMatrix [3 0 0 -3 0 3]
  /BitsPerComponent 8
  /Decode [0 1 0 1 0 1]
  /DataSource { pdfImStr }
    /LZWDecode filter
>>
image
pop pop
Q
Q
} def
end
currentdict end
/xpdfTile0 exch definefont pop
/xpdfTile0 findfont setfont
fCol
gsave [7.5 0 0 -7.49996 -462 2830.5] concat
0 1 1 { -33 exch 96 mul m -1 1 0 { pop (x) show } for } for
grestore
Q
20.0025 w
0 J
/DeviceGray {} CS
[0] SC
992.5 2237.5 m
992.5 1517.5 l
S
827.5 1757.5 m
1075 1757.5 l
S
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 85.6375 207.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(8%)
[5.559861
0
8.889778
0] Tj
0 -24 Td
(19%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -48 Td
(27%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 0 Td
(17%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[1] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 93.8875 183.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(56%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(73%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 102.138 207.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(25%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[1] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 102.138 183.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(75%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(64%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
5.0025 w
2 J
/DeviceGray {} CS
[0.1489] SC
827.5 2237.5 m
1075 2237.5 l
S
827.5 1517.5 m
1075 1517.5 l
S
868.75 2237.5 m
868.75 2230.3 l
S
951.25 2237.5 m
951.25 2230.3 l
S
868.75 1517.5 m
868.75 1524.7 l
S
951.25 1517.5 m
951.25 1524.7 l
S
/DeviceGray {} cs
[0.1489] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 83.125 230] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
-103.021 TJm
(C)
[7.21982
0] Tj
-6.375 14.5 Td
/F12_0 11.0002 Tf
(Human)
[7.942144
0
6.116111
0
9.163167
0
6.116111
0
6.116111
0] Tj
Q
827.5 2237.5 m
827.5 1517.5 l
S
1075 2237.5 m
1075 1517.5 l
S
827.5 2117.5 m
834.699 2117.5 l
S
827.5 1877.5 m
834.699 1877.5 l
S
1075 2117.5 m
1067.8 2117.5 l
S
1075 1877.5 m
1067.8 1877.5 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 71.25 207.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
0 -24 Td
(C)
[7.21982
0] Tj
[0 1 -1 0 65.25 175.375] Tm
0 0 Td
/F12_0 11.0002 Tf
(RNN)
[7.942144
0
7.942144
0
7.942144
0] Tj
Q
/DeviceGray {} cs
[1] sc
1397.5 1517.5 247.5 720 re
f
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 128.5 261.563] Tm
0 0 Td
/F9_0 11.0002 Tf
(RNN, t=2)
[7.942144
0
7.942144
0
7.942144
0
3.058056
0
3.058056
0
3.663067
0
6.424117
0
6.116111
0] Tj
Q
q
/DeviceGray {} cs
/DeviceGray {} CS
0 w
1397.5 1517.5 247.5 720 re
W
8 dict begin
/FontType 3 def
/FontMatrix [1 0 0 1 0 0] def
/FontBBox [248 79 281 175] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding 120 /x put
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 1 dict def
CharProcs begin
/x {
33 0 setcharwidth
[0.1 0 0 0.1 0 0] cm
q
2480 790 330 960 re
W
q
[330 0 0 -960 2480 1750] cm
/DeviceRGB setcolorspace
[<~J3VsdkT^ECeq=VY5R:ia*!D'),#Ag~>
<>]
0
<<
  /ImageType 1
  /Width 3
  /Height 3
  /ImageMatrix [3 0 0 -3 0 3]
  /BitsPerComponent 8
  /Decode [0 1 0 1 0 1]
  /DataSource { pdfImStr }
    /LZWDecode filter
>>
image
pop pop
Q
Q
} def
end
currentdict end
/xpdfTile0 exch definefont pop
/xpdfTile0 findfont setfont
fCol
gsave [7.5 0 0 -7.49996 -462 2830.5] concat
0 1 1 { -33 exch 96 mul m -1 1 0 { pop (x) show } for } for
grestore
Q
20.0025 w
0 J
/DeviceGray {} CS
[0] SC
1562.5 2237.5 m
1562.5 1517.5 l
S
1397.5 1757.5 m
1645 1757.5 l
S
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 142.638 207.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(8%)
[5.559861
0
8.889778
0] Tj
0 -24 Td
(19%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -48 Td
(27%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 0 Td
(17%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[1] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 150.888 183.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(57%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(73%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 159.138 207.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(25%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[1] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 159.138 183.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(75%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(65%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
5.0025 w
2 J
/DeviceGray {} CS
[0.1489] SC
1397.5 2237.5 m
1645 2237.5 l
S
1397.5 1517.5 m
1645 1517.5 l
S
1438.75 2237.5 m
1438.75 2230.3 l
S
1521.25 2237.5 m
1521.25 2230.3 l
S
1438.75 1517.5 m
1438.75 1524.7 l
S
1521.25 1517.5 m
1521.25 1524.7 l
S
/DeviceGray {} cs
[0.1489] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 140.125 230] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
-103.02 TJm
(C)
[7.21982
0] Tj
-6.375 14.5 Td
/F12_0 11.0002 Tf
(Human)
[7.942144
0
6.116111
0
9.163167
0
6.116111
0
6.116111
0] Tj
Q
1397.5 2237.5 m
1397.5 1517.5 l
S
1645 2237.5 m
1645 1517.5 l
S
1397.5 2117.5 m
1404.7 2117.5 l
S
1397.5 1877.5 m
1404.7 1877.5 l
S
1645 2117.5 m
1637.8 2117.5 l
S
1645 1877.5 m
1637.8 1877.5 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 128.25 207.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
0 -24 Td
(C)
[7.21982
0] Tj
[0 1 -1 0 122.25 175.375] Tm
0 0 Td
/F12_0 11.0002 Tf
(RNN)
[7.942144
0
7.942144
0
7.942144
0] Tj
Q
/DeviceGray {} cs
[1] sc
1960 1517.5 247.5 720 re
f
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 184.75 261.563] Tm
0 0 Td
/F9_0 11.0002 Tf
(RNN, t=3)
[7.942144
0
7.942144
0
7.942144
0
3.058056
0
3.058056
0
3.663067
0
6.424117
0
6.116111
0] Tj
Q
q
/DeviceGray {} cs
/DeviceGray {} CS
0 w
1960 1517.5 247.5 720 re
W
8 dict begin
/FontType 3 def
/FontMatrix [1 0 0 1 0 0] def
/FontBBox [323 79 356 175] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding 120 /x put
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 1 dict def
CharProcs begin
/x {
33 0 setcharwidth
[0.1 0 0 0.1 0 0] cm
q
3230 790 330 960 re
W
q
[330 0 0 -960 3230 1750] cm
/DeviceRGB setcolorspace
[<~J3VsekT_Pcie.jd5R:iq*"7W.,#Ag~>
<>]
0
<<
  /ImageType 1
  /Width 3
  /Height 3
  /ImageMatrix [3 0 0 -3 0 3]
  /BitsPerComponent 8
  /Decode [0 1 0 1 0 1]
  /DataSource { pdfImStr }
    /LZWDecode filter
>>
image
pop pop
Q
Q
} def
end
currentdict end
/xpdfTile0 exch definefont pop
/xpdfTile0 findfont setfont
fCol
gsave [7.5 0 0 -7.49996 -462.5 2830.5] concat
0 1 1 { -33 exch 96 mul m -1 1 1 { pop (x) show } for } for
grestore
Q
20.0025 w
0 J
/DeviceGray {} CS
[0] SC
2125 2237.5 m
2125 1517.5 l
S
1960 1757.5 m
2207.5 1757.5 l
S
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 198.888 207.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(9%)
[5.559861
0
8.889778
0] Tj
0 -24 Td
(17%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -48 Td
(27%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 0 Td
(14%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[1] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 207.138 183.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(60%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(73%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 215.388 207.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(23%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[1] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 215.388 183.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(77%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(69%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
5.0025 w
2 J
/DeviceGray {} CS
[0.1489] SC
1960 2237.5 m
2207.5 2237.5 l
S
1960 1517.5 m
2207.5 1517.5 l
S
2001.25 2237.5 m
2001.25 2230.3 l
S
2083.75 2237.5 m
2083.75 2230.3 l
S
2001.25 1517.5 m
2001.25 1524.7 l
S
2083.75 1517.5 m
2083.75 1524.7 l
S
/DeviceGray {} cs
[0.1489] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 196.375 230] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
-103.02 TJm
(C)
[7.21982
0] Tj
-6.375 14.5 Td
/F12_0 11.0002 Tf
(Human)
[7.942144
0
6.116111
0
9.163167
0
6.116111
0
6.116111
0] Tj
Q
1960 2237.5 m
1960 1517.5 l
S
2207.5 2237.5 m
2207.5 1517.5 l
S
1960 2117.5 m
1967.2 2117.5 l
S
1960 1877.5 m
1967.2 1877.5 l
S
2207.5 2117.5 m
2200.3 2117.5 l
S
2207.5 1877.5 m
2200.3 1877.5 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 184.5 207.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
0 -24 Td
(C)
[7.21982
0] Tj
[0 1 -1 0 178.5 175.375] Tm
0 0 Td
/F12_0 11.0002 Tf
(RNN)
[7.942144
0
7.942144
0
7.942144
0] Tj
Q
/DeviceGray {} cs
[1] sc
2522.5 1517.5 247.5 720 re
f
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 241 261.563] Tm
0 0 Td
/F9_0 11.0002 Tf
(RNN, t=4)
[7.942144
0
7.942144
0
7.942144
0
3.058056
0
3.058056
0
3.663067
0
6.424117
0
6.116111
0] Tj
Q
q
/DeviceGray {} cs
/DeviceGray {} CS
0 w
2522.5 1517.5 247.5 720 re
W
8 dict begin
/FontType 3 def
/FontMatrix [1 0 0 1 0 0] def
/FontBBox [398 79 431 175] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding 120 /x put
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 1 dict def
CharProcs begin
/x {
33 0 setcharwidth
[0.1 0 0 0.1 0 0] cm
q
3980 790 330 960 re
W
q
[330 0 0 -960 3980 1750] cm
/DeviceRGB setcolorspace
[<~J3VsekT`\.g4U"\5R:iq*#+28,#Ag~>
<>]
0
<<
  /ImageType 1
  /Width 3
  /Height 3
  /ImageMatrix [3 0 0 -3 0 3]
  /BitsPerComponent 8
  /Decode [0 1 0 1 0 1]
  /DataSource { pdfImStr }
    /LZWDecode filter
>>
image
pop pop
Q
Q
} def
end
currentdict end
/xpdfTile0 exch definefont pop
/xpdfTile0 findfont setfont
fCol
gsave [7.5 0 0 -7.49996 -462 2830.5] concat
0 1 1 { -33 exch 96 mul m -1 1 0 { pop (x) show } for } for
grestore
Q
20.0025 w
0 J
/DeviceGray {} CS
[0] SC
2687.5 2237.5 m
2687.5 1517.5 l
S
2522.5 1757.5 m
2770 1757.5 l
S
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 255.138 207.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(8%)
[5.559861
0
8.889778
0] Tj
0 -24 Td
(18%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -48 Td
(27%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 0 Td
(13%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[1] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 263.387 183.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(61%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(73%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 271.637 207.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(21%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[1] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 271.637 183.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(79%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(69%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
5.0025 w
2 J
/DeviceGray {} CS
[0.1489] SC
2522.5 2237.5 m
2770 2237.5 l
S
2522.5 1517.5 m
2770 1517.5 l
S
2563.75 2237.5 m
2563.75 2230.3 l
S
2646.25 2237.5 m
2646.25 2230.3 l
S
2563.75 1517.5 m
2563.75 1524.7 l
S
2646.25 1517.5 m
2646.25 1524.7 l
S
/DeviceGray {} cs
[0.1489] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 252.625 230] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
-103.02 TJm
(C)
[7.21982
0] Tj
-6.375 14.5 Td
/F12_0 11.0002 Tf
(Human)
[7.942144
0
6.116111
0
9.163167
0
6.116111
0
6.116111
0] Tj
Q
2522.5 2237.5 m
2522.5 1517.5 l
S
2770 2237.5 m
2770 1517.5 l
S
2522.5 2117.5 m
2529.7 2117.5 l
S
2522.5 1877.5 m
2529.7 1877.5 l
S
2770 2117.5 m
2762.8 2117.5 l
S
2770 1877.5 m
2762.8 1877.5 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 240.75 207.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
0 -24 Td
(C)
[7.21982
0] Tj
[0 1 -1 0 234.75 175.375] Tm
0 0 Td
/F12_0 11.0002 Tf
(RNN)
[7.942144
0
7.942144
0
7.942144
0] Tj
Q
/DeviceGray {} cs
[1] sc
3092.5 1517.5 247.5 720 re
f
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 282.625 261.563] Tm
0 0 Td
/F9_0 11.0002 Tf
(human-human)
[6.721122
0
6.721122
0
9.779178
0
6.116111
0
6.721122
0
3.663067
0
6.721122
0
6.721122
0
9.779178
0
6.116111
0
6.721122
0] Tj
Q
q
/DeviceGray {} cs
/DeviceGray {} CS
0 w
3092.5 1517.5 247.5 720 re
W
8 dict begin
/FontType 3 def
/FontMatrix [1 0 0 1 0 0] def
/FontBBox [474 79 507 175] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding 120 /x put
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 1 dict def
CharProcs begin
/x {
33 0 setcharwidth
[0.1 0 0 0.1 0 0] cm
q
4740 790 330 960 re
W
q
[330 0 0 -960 4740 1750] cm
/DeviceRGB setcolorspace
[<~J3VseW$:L8mXu/q5Y,A\)utcu,#Ag~>
<>]
0
<<
  /ImageType 1
  /Width 3
  /Height 3
  /ImageMatrix [3 0 0 -3 0 3]
  /BitsPerComponent 8
  /Decode [0 1 0 1 0 1]
  /DataSource { pdfImStr }
    /LZWDecode filter
>>
image
pop pop
Q
Q
} def
end
currentdict end
/xpdfTile0 exch definefont pop
/xpdfTile0 findfont setfont
fCol
gsave [7.5 0 0 -7.49996 -462 2830.5] concat
0 1 1 { -33 exch 96 mul m -1 1 0 { pop (x) show } for } for
grestore
Q
20.0025 w
0 J
/DeviceGray {} CS
[0] SC
3257.5 2237.5 m
3257.5 1517.5 l
S
3092.5 1757.5 m
3340 1757.5 l
S
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 312.138 207.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(11%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(16%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -48 Td
(27%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 0 Td
(17%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[1] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 320.388 183.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(56%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(73%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 328.638 207.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(28%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[1] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 328.638 183.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(72%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(68%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
5.0025 w
2 J
/DeviceGray {} CS
[0.1489] SC
3092.5 2237.5 m
3340 2237.5 l
S
3092.5 1517.5 m
3340 1517.5 l
S
3133.75 2237.5 m
3133.75 2230.3 l
S
3216.25 2237.5 m
3216.25 2230.3 l
S
3133.75 1517.5 m
3133.75 1524.7 l
S
3216.25 1517.5 m
3216.25 1524.7 l
S
/DeviceGray {} cs
[0.1489] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 309.625 230] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
-103.02 TJm
(C)
[7.21982
0] Tj
-6.375 14.5 Td
/F12_0 11.0002 Tf
(Human)
[7.942144
0
6.116111
0
9.163167
0
6.116111
0
6.116111
0] Tj
Q
3092.5 2237.5 m
3092.5 1517.5 l
S
3340 2237.5 m
3340 1517.5 l
S
3092.5 2117.5 m
3099.7 2117.5 l
S
3092.5 1877.5 m
3099.7 1877.5 l
S
3340 2117.5 m
3332.8 2117.5 l
S
3340 1877.5 m
3332.8 1877.5 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 297.75 207.625] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
0 -24 Td
(C)
[7.21982
0] Tj
[0 1 -1 0 291.75 169.375] Tm
0 0 Td
/F12_0 11.0002 Tf
(Human)
[7.942144
0
6.116111
0
9.163167
0
6.116111
0
6.116111
0] Tj
Q
/DeviceGray {} cs
[1] sc
265 25 247.5 720 re
f
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 4.75 112.313] Tm
0 0 Td
/F9_0 11.0002 Tf
(Hopfield, t=0)
[7.942144
0
6.721122
0
6.721122
0
3.663067
0
3.058056
0
6.116111
0
3.058056
0
6.721122
0
3.058056
0
3.058056
0
3.663067
0
6.424117
0
6.116111
0] Tj
Q
q
/DeviceGray {} cs
/DeviceGray {} CS
0 w
265 25 247.5 720 re
W
8 dict begin
/FontType 3 def
/FontMatrix [1 0 0 1 0 0] def
/FontBBox [97 278 130 374] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding 120 /x put
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 1 dict def
CharProcs begin
/x {
33 0 setcharwidth
[0.1 0 0 0.1 0 0] cm
q
970 2780 330 960 re
W
q
[330 0 0 -960 970 3740] cm
/DeviceRGB setcolorspace
[<~J3Vs_fHFi8qLg;+7bD2h)utd7@SdU~>
<>]
0
<<
  /ImageType 1
  /Width 3
  /Height 3
  /ImageMatrix [3 0 0 -3 0 3]
  /BitsPerComponent 8
  /Decode [0 1 0 1 0 1]
  /DataSource { pdfImStr }
    /LZWDecode filter
>>
image
pop pop
Q
Q
} def
end
currentdict end
/xpdfTile0 exch definefont pop
/xpdfTile0 findfont setfont
fCol
gsave [7.5 0 0 -7.49996 -462.5 2830] concat
0 1 1 { -33 exch 96 mul m -1 1 1 { pop (x) show } for } for
grestore
Q
20.0025 w
0 J
/DeviceGray {} CS
[0] SC
430 745 m
430 25 l
S
265 265 m
512.5 265 l
S
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 29.3875 58.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(13%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(14%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -48 Td
(27%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[1] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 37.6375 58.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(39%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 37.6375 34.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(34%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[1] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 37.6375 10.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(73%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 48 Td
(52%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 24 Td
(48%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 0 Td
(47%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
5.0025 w
2 J
/DeviceGray {} CS
[0.1489] SC
265 745 m
512.5 745 l
S
265 25 m
512.5 25 l
S
306.25 745 m
306.25 737.801 l
S
388.75 745 m
388.75 737.801 l
S
306.25 25 m
306.25 32.1992 l
S
388.75 25 m
388.75 32.1992 l
S
/DeviceGray {} cs
[0.1489] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 26.875 80.75] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
-103.021 TJm
(C)
[7.21982
0] Tj
-6.375 14.5 Td
/F12_0 11.0002 Tf
(Human)
[7.942144
0
6.116111
0
9.163167
0
6.116111
0
6.116111
0] Tj
Q
265 745 m
265 25 l
S
512.5 745 m
512.5 25 l
S
265 625 m
272.199 625 l
S
265 385 m
272.199 385 l
S
512.5 625 m
505.301 625 l
S
512.5 385 m
505.301 385 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 15 58.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
0 -24 Td
(C)
[7.21982
0] Tj
[0 1 -1 0 9 17.5] Tm
0 0 Td
/F12_0 11.0002 Tf
(Hopfield)
[7.942144
0
6.116111
0
6.116111
0
3.058056
0
2.442044
0
6.116111
0
2.442044
0
6.116111
0] Tj
Q
/DeviceGray {} cs
[1] sc
827.5 25 247.5 720 re
f
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 61 112.313] Tm
0 0 Td
/F9_0 11.0002 Tf
(Hopfield, t=2)
[7.942144
0
6.721122
0
6.721122
0
3.663067
0
3.058056
0
6.116111
0
3.058056
0
6.721122
0
3.058056
0
3.058056
0
3.663067
0
6.424117
0
6.116111
0] Tj
Q
q
/DeviceGray {} cs
/DeviceGray {} CS
0 w
827.5 25 247.5 720 re
W
8 dict begin
/FontType 3 def
/FontMatrix [1 0 0 1 0 0] def
/FontBBox [172 278 205 374] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding 120 /x put
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 1 dict def
CharProcs begin
/x {
33 0 setcharwidth
[0.1 0 0 0.1 0 0] cm
q
1720 2780 330 960 re
W
q
[330 0 0 -960 1720 3740] cm
/DeviceRGB setcolorspace
[<~J3VsakTTX.p4OPs6qCep)utd/,#Ag~>
<>]
0
<<
  /ImageType 1
  /Width 3
  /Height 3
  /ImageMatrix [3 0 0 -3 0 3]
  /BitsPerComponent 8
  /Decode [0 1 0 1 0 1]
  /DataSource { pdfImStr }
    /LZWDecode filter
>>
image
pop pop
Q
Q
} def
end
currentdict end
/xpdfTile0 exch definefont pop
/xpdfTile0 findfont setfont
fCol
gsave [7.5 0 0 -7.49996 -462 2830] concat
0 1 1 { -33 exch 96 mul m -1 1 0 { pop (x) show } for } for
grestore
Q
20.0025 w
0 J
/DeviceGray {} CS
[0] SC
992.5 745 m
992.5 25 l
S
827.5 265 m
1075 265 l
S
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 85.6375 58.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(12%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(15%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -48 Td
(27%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 0 Td
(31%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[1] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 93.8875 34.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(42%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(73%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 24 Td
(43%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 0 Td
(57%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 -24 Td
(54%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
5.0025 w
2 J
/DeviceGray {} CS
[0.1489] SC
827.5 745 m
1075 745 l
S
827.5 25 m
1075 25 l
S
868.75 745 m
868.75 737.801 l
S
951.25 745 m
951.25 737.801 l
S
868.75 25 m
868.75 32.1992 l
S
951.25 25 m
951.25 32.1992 l
S
/DeviceGray {} cs
[0.1489] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 83.125 80.75] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
-103.021 TJm
(C)
[7.21982
0] Tj
-6.375 14.5 Td
/F12_0 11.0002 Tf
(Human)
[7.942144
0
6.116111
0
9.163167
0
6.116111
0
6.116111
0] Tj
Q
827.5 745 m
827.5 25 l
S
1075 745 m
1075 25 l
S
827.5 625 m
834.699 625 l
S
827.5 385 m
834.699 385 l
S
1075 625 m
1067.8 625 l
S
1075 385 m
1067.8 385 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 71.25 58.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
0 -24 Td
(C)
[7.21982
0] Tj
[0 1 -1 0 65.25 17.5] Tm
0 0 Td
/F12_0 11.0002 Tf
(Hopfield)
[7.942144
0
6.116111
0
6.116111
0
3.058056
0
2.442044
0
6.116111
0
2.442044
0
6.116111
0] Tj
Q
/DeviceGray {} cs
[1] sc
1397.5 25 247.5 720 re
f
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 115 112.313] Tm
0 0 Td
/F9_0 11.0002 Tf
(Hopfield, t=16)
[7.942144
0
6.721122
0
6.721122
0
3.663067
0
3.058056
0
6.116111
0
3.058056
0
6.721122
0
3.058056
0
3.058056
0
3.663067
0
6.424117
0
6.116111
0
6.116111
0] Tj
Q
q
/DeviceGray {} cs
/DeviceGray {} CS
0 w
1397.5 25 247.5 720 re
W
8 dict begin
/FontType 3 def
/FontMatrix [1 0 0 1 0 0] def
/FontBBox [248 278 281 374] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding 120 /x put
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 1 dict def
CharProcs begin
/x {
33 0 setcharwidth
[0.1 0 0 0.1 0 0] cm
q
2480 2780 330 960 re
W
q
[330 0 0 -960 2480 3740] cm
/DeviceRGB setcolorspace
[<~J3VscBHfnSp4OAn6O70/)utd),#Ag~>
<>]
0
<<
  /ImageType 1
  /Width 3
  /Height 3
  /ImageMatrix [3 0 0 -3 0 3]
  /BitsPerComponent 8
  /Decode [0 1 0 1 0 1]
  /DataSource { pdfImStr }
    /LZWDecode filter
>>
image
pop pop
Q
Q
} def
end
currentdict end
/xpdfTile0 exch definefont pop
/xpdfTile0 findfont setfont
fCol
gsave [7.5 0 0 -7.49996 -462 2830] concat
0 1 1 { -33 exch 96 mul m -1 1 0 { pop (x) show } for } for
grestore
Q
20.0025 w
0 J
/DeviceGray {} CS
[0] SC
1562.5 745 m
1562.5 25 l
S
1397.5 265 m
1645 265 l
S
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 142.638 58.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(12%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(15%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -48 Td
(27%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 0 Td
(26%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[1] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 150.888 34.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(47%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(73%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 24 Td
(38%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 0 Td
(62%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 -24 Td
(59%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
5.0025 w
2 J
/DeviceGray {} CS
[0.1489] SC
1397.5 745 m
1645 745 l
S
1397.5 25 m
1645 25 l
S
1438.75 745 m
1438.75 737.801 l
S
1521.25 745 m
1521.25 737.801 l
S
1438.75 25 m
1438.75 32.1992 l
S
1521.25 25 m
1521.25 32.1992 l
S
/DeviceGray {} cs
[0.1489] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 140.125 80.75] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
-103.02 TJm
(C)
[7.21982
0] Tj
-6.375 14.5 Td
/F12_0 11.0002 Tf
(Human)
[7.942144
0
6.116111
0
9.163167
0
6.116111
0
6.116111
0] Tj
Q
1397.5 745 m
1397.5 25 l
S
1645 745 m
1645 25 l
S
1397.5 625 m
1404.7 625 l
S
1397.5 385 m
1404.7 385 l
S
1645 625 m
1637.8 625 l
S
1645 385 m
1637.8 385 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 128.25 58.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
0 -24 Td
(C)
[7.21982
0] Tj
[0 1 -1 0 122.25 17.5] Tm
0 0 Td
/F12_0 11.0002 Tf
(Hopfield)
[7.942144
0
6.116111
0
6.116111
0
3.058056
0
2.442044
0
6.116111
0
2.442044
0
6.116111
0] Tj
Q
/DeviceGray {} cs
[1] sc
1960 25 247.5 720 re
f
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 171.25 112.313] Tm
0 0 Td
/F9_0 11.0002 Tf
(Hopfield, t=64)
[7.942144
0
6.721122
0
6.721122
0
3.663067
0
3.058056
0
6.116111
0
3.058056
0
6.721122
0
3.058056
0
3.058056
0
3.663067
0
6.424117
0
6.116111
0
6.116111
0] Tj
Q
q
/DeviceGray {} cs
/DeviceGray {} CS
0 w
1960 25 247.5 720 re
W
8 dict begin
/FontType 3 def
/FontMatrix [1 0 0 1 0 0] def
/FontBBox [323 278 356 374] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding 120 /x put
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 1 dict def
CharProcs begin
/x {
33 0 setcharwidth
[0.1 0 0 0.1 0 0] cm
q
3230 2780 330 960 re
W
q
[330 0 0 -960 3230 3740] cm
/DeviceRGB setcolorspace
[<~J3VsbkTV>^qLfkt6\o4j)utd+,#Ag~>
<>]
0
<<
  /ImageType 1
  /Width 3
  /Height 3
  /ImageMatrix [3 0 0 -3 0 3]
  /BitsPerComponent 8
  /Decode [0 1 0 1 0 1]
  /DataSource { pdfImStr }
    /LZWDecode filter
>>
image
pop pop
Q
Q
} def
end
currentdict end
/xpdfTile0 exch definefont pop
/xpdfTile0 findfont setfont
fCol
gsave [7.5 0 0 -7.49996 -462.5 2830] concat
0 1 1 { -33 exch 96 mul m -1 1 1 { pop (x) show } for } for
grestore
Q
20.0025 w
0 J
/DeviceGray {} CS
[0] SC
2125 745 m
2125 25 l
S
1960 265 m
2207.5 265 l
S
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 198.888 58.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(12%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(14%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -48 Td
(27%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 0 Td
(29%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[1] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 207.138 34.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(45%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(73%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 24 Td
(41%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 0 Td
(59%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 -24 Td
(57%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
5.0025 w
2 J
/DeviceGray {} CS
[0.1489] SC
1960 745 m
2207.5 745 l
S
1960 25 m
2207.5 25 l
S
2001.25 745 m
2001.25 737.801 l
S
2083.75 745 m
2083.75 737.801 l
S
2001.25 25 m
2001.25 32.1992 l
S
2083.75 25 m
2083.75 32.1992 l
S
/DeviceGray {} cs
[0.1489] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 196.375 80.75] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
-103.02 TJm
(C)
[7.21982
0] Tj
-6.375 14.5 Td
/F12_0 11.0002 Tf
(Human)
[7.942144
0
6.116111
0
9.163167
0
6.116111
0
6.116111
0] Tj
Q
1960 745 m
1960 25 l
S
2207.5 745 m
2207.5 25 l
S
1960 625 m
1967.2 625 l
S
1960 385 m
1967.2 385 l
S
2207.5 625 m
2200.3 625 l
S
2207.5 385 m
2200.3 385 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 184.5 58.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
0 -24 Td
(C)
[7.21982
0] Tj
[0 1 -1 0 178.5 17.5] Tm
0 0 Td
/F12_0 11.0002 Tf
(Hopfield)
[7.942144
0
6.116111
0
6.116111
0
3.058056
0
2.442044
0
6.116111
0
2.442044
0
6.116111
0] Tj
Q
/DeviceGray {} cs
[1] sc
2522.5 25 247.5 720 re
f
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 224.125 112.313] Tm
0 0 Td
/F9_0 11.0002 Tf
(Hopfield, t=256)
[7.942144
0
6.721122
0
6.721122
0
3.663067
0
3.058056
0
6.116111
0
3.058056
0
6.721122
0
3.058056
0
3.058056
0
3.663067
0
6.424117
0
6.116111
0
6.116111
0
6.116111
0] Tj
Q
q
/DeviceGray {} cs
/DeviceGray {} CS
0 w
2522.5 25 247.5 720 re
W
8 dict begin
/FontType 3 def
/FontMatrix [1 0 0 1 0 0] def
/FontBBox [398 278 431 374] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding 120 /x put
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 1 dict def
CharProcs begin
/x {
33 0 setcharwidth
[0.1 0 0 0.1 0 0] cm
q
3980 2780 330 960 re
W
q
[330 0 0 -960 3980 3740] cm
/DeviceRGB setcolorspace
[<~J3VsbkTV>^qLfkt6c`aU)utd+,#Ag~>
<>]
0
<<
  /ImageType 1
  /Width 3
  /Height 3
  /ImageMatrix [3 0 0 -3 0 3]
  /BitsPerComponent 8
  /Decode [0 1 0 1 0 1]
  /DataSource { pdfImStr }
    /LZWDecode filter
>>
image
pop pop
Q
Q
} def
end
currentdict end
/xpdfTile0 exch definefont pop
/xpdfTile0 findfont setfont
fCol
gsave [7.5 0 0 -7.49996 -462 2830] concat
0 1 1 { -33 exch 96 mul m -1 1 0 { pop (x) show } for } for
grestore
Q
20.0025 w
0 J
/DeviceGray {} CS
[0] SC
2687.5 745 m
2687.5 25 l
S
2522.5 265 m
2770 265 l
S
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 255.138 58.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(12%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(14%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -48 Td
(27%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 0 Td
(29%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[1] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 263.387 34.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(45%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(73%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 24 Td
(41%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 0 Td
(59%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 -24 Td
(57%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
5.0025 w
2 J
/DeviceGray {} CS
[0.1489] SC
2522.5 745 m
2770 745 l
S
2522.5 25 m
2770 25 l
S
2563.75 745 m
2563.75 737.801 l
S
2646.25 745 m
2646.25 737.801 l
S
2563.75 25 m
2563.75 32.1992 l
S
2646.25 25 m
2646.25 32.1992 l
S
/DeviceGray {} cs
[0.1489] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 252.625 80.75] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
-103.02 TJm
(C)
[7.21982
0] Tj
-6.375 14.5 Td
/F12_0 11.0002 Tf
(Human)
[7.942144
0
6.116111
0
9.163167
0
6.116111
0
6.116111
0] Tj
Q
2522.5 745 m
2522.5 25 l
S
2770 745 m
2770 25 l
S
2522.5 625 m
2529.7 625 l
S
2522.5 385 m
2529.7 385 l
S
2770 625 m
2762.8 625 l
S
2770 385 m
2762.8 385 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 240.75 58.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
0 -24 Td
(C)
[7.21982
0] Tj
[0 1 -1 0 234.75 17.5] Tm
0 0 Td
/F12_0 11.0002 Tf
(Hopfield)
[7.942144
0
6.116111
0
6.116111
0
3.058056
0
2.442044
0
6.116111
0
2.442044
0
6.116111
0] Tj
Q
/DeviceGray {} cs
[1] sc
3092.5 25 247.5 720 re
f
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 282.625 112.313] Tm
0 0 Td
/F9_0 11.0002 Tf
(human-human)
[6.721122
0
6.721122
0
9.779178
0
6.116111
0
6.721122
0
3.663067
0
6.721122
0
6.721122
0
9.779178
0
6.116111
0
6.721122
0] Tj
Q
q
/DeviceGray {} cs
/DeviceGray {} CS
0 w
3092.5 25 247.5 720 re
W
8 dict begin
/FontType 3 def
/FontMatrix [1 0 0 1 0 0] def
/FontBBox [474 278 507 374] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding 120 /x put
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 1 dict def
CharProcs begin
/x {
33 0 setcharwidth
[0.1 0 0 0.1 0 0] cm
q
4740 2780 330 960 re
W
q
[330 0 0 -960 4740 3740] cm
/DeviceRGB setcolorspace
[<~J3VseW$:L8mXu/q5Y,A\)utcu,#Ag~>
<>]
0
<<
  /ImageType 1
  /Width 3
  /Height 3
  /ImageMatrix [3 0 0 -3 0 3]
  /BitsPerComponent 8
  /Decode [0 1 0 1 0 1]
  /DataSource { pdfImStr }
    /LZWDecode filter
>>
image
pop pop
Q
Q
} def
end
currentdict end
/xpdfTile0 exch definefont pop
/xpdfTile0 findfont setfont
fCol
gsave [7.5 0 0 -7.49996 -462 2830] concat
0 1 1 { -33 exch 96 mul m -1 1 0 { pop (x) show } for } for
grestore
Q
20.0025 w
0 J
/DeviceGray {} CS
[0] SC
3257.5 745 m
3257.5 25 l
S
3092.5 265 m
3340 265 l
S
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 312.138 58.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(11%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(16%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -48 Td
(27%)
[5.559861
0
5.559861
0
8.889778
0] Tj
8.25 0 Td
(17%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[1] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 320.388 34.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(56%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(73%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 328.638 58.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(28%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
/DeviceGray {} cs
[1] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 328.638 34.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(72%)
[5.559861
0
5.559861
0
8.889778
0] Tj
0 -24 Td
(68%)
[5.559861
0
5.559861
0
8.889778
0] Tj
Q
5.0025 w
2 J
/DeviceGray {} CS
[0.1489] SC
3092.5 745 m
3340 745 l
S
3092.5 25 m
3340 25 l
S
3133.75 745 m
3133.75 737.801 l
S
3216.25 745 m
3216.25 737.801 l
S
3133.75 25 m
3133.75 32.1992 l
S
3216.25 25 m
3216.25 32.1992 l
S
/DeviceGray {} cs
[0.1489] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 309.625 80.75] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
-103.02 TJm
(C)
[7.21982
0] Tj
-6.375 14.5 Td
/F12_0 11.0002 Tf
(Human)
[7.942144
0
6.116111
0
9.163167
0
6.116111
0
6.116111
0] Tj
Q
3092.5 745 m
3092.5 25 l
S
3340 745 m
3340 25 l
S
3092.5 625 m
3099.7 625 l
S
3092.5 385 m
3099.7 385 l
S
3340 625 m
3332.8 625 l
S
3340 385 m
3332.8 385 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 297.75 58.375] Tm
0 0 Td
/F12_0 9.99975 Tf
(N)
[7.21982
0] Tj
0 -24 Td
(C)
[7.21982
0] Tj
[0 1 -1 0 291.75 20.125] Tm
0 0 Td
/F12_0 11.0002 Tf
(Human)
[7.942144
0
6.116111
0
9.163167
0
6.116111
0
6.116111
0] Tj
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
end
%%Trailer
%%DocumentSuppliedResources:
%%+ font HZAJIY+Helvetica
%%+ font QJKSXK+Helvetica-Bold
%%EOF
