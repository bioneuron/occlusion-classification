function corrData = figures6(corrData)

%% collect data
timeResultsHop = load('data/results/classification/hoptimes-trainAll.mat');
timeResultsHop = timeResultsHop.results;
rnnResults = load('data/results/classification/rnntimes.mat');
rnnResults = rnnResults.results;
train1CatResults = load('data/results/classification/train1cat/excludeTrainCategory/merged.mat');
train1CatResults = train1CatResults.results;
fc7Results = filterResults(rnnResults, ...
    @(r) strcmp(r.name, 'RNN_features_fc7_noRelu_t0-libsvmccv'));
fc7Results = changeResults(fc7Results, 'name', ...
    @(r) repmat({'fc7'}, [size(r, 1), 1]));
% vs visibility
visibilityResults = mergeResults(fc7Results, ...
    ...% hop
    changeResults(filterResults(timeResultsHop, ...
    @(r) strcmp(r.name, 'caffenet_fc7-bipolar0-hop_t256-libsvmccv')), ...
    'name', @(r) repmat({'Hopfield'}, [size(r, 1), 1])), ...
    ...% RNN
    changeResults(filterResults(rnnResults, ...
    @(r) strcmp(r.name, 'RNN_features_fc7_noRelu_t4-libsvmccv')), ...
    'name', @(r) repmat({'RNN'}, [size(r, 1), 1])), ...
    ...% RNN-train1cat
    changeResults(...
    filterResults(train1CatResults, ...
    @(r) cellfun(@(m) ~isempty(m), ...
    regexp(r.name, 'train1cat/split\-.+_t\-4/features\-libsvmccv'))), ...
    'name', @(r) repmat({'RNN-train1cat'}, [size(r, 1), 1]))...
    );
% vs time
timestepsHop = 2.^(1:8);
timestepsRnn = 1:4;
t0ResultsHop = fc7Results;
t0ResultsHop = changeResults(t0ResultsHop, 'name', ...
    @(r) repmat({'caffenet_fc7_t0'}, [size(r, 1), 1]));
timeResultsHop = mergeResults(...
    filterResults(timeResultsHop, @(r) cellfun(@(m) ~isempty(m), ...
    regexp(r.name, ['caffenet_fc7-bipolar0-hop_t' ...
    timesteps2regexp(timestepsHop) '-libsvmccv']))), ...
    t0ResultsHop);
t0ResultsRnn = fc7Results;
t0ResultsRnn = changeResults(t0ResultsRnn, 'name', ...
    @(r) repmat({'RNN_fc7_noRelu_t0-libsvmccv'}, [size(r, 1), 1]));
timeResultsRnn = mergeResults(t0ResultsRnn, ...
    filterResults(rnnResults, @(r) cellfun(@(m) ~isempty(m), ...
    regexp(r.name, ['_t' timesteps2regexp(timestepsRnn)]))));
t0ResultsTrain1Category = fc7Results;
t0ResultsTrain1Category = changeResults(t0ResultsTrain1Category, 'name', ...
    @(r) repmat({'train1cat/split-0_t-0/features-libsvmccv'}, [size(r, 1), 1]));
timeResultsRnnTrain1Category = mergeResults(t0ResultsTrain1Category, ...
    filterResults(train1CatResults, @(r) cellfun(@(m) ~isempty(m), ...
    regexp(r.name, ['split-1_t-' timesteps2regexp(timestepsRnn)]))));
timeResults = mergeResults(timeResultsHop, timeResultsRnn);%, ...
    %timeResultsRnnTrain1Category);
% correlation
timestepsHopCorrelation = [0, 2, 16, 64, 256];
correlationExemplarResults = mergeResults(...
    filterResults(timeResultsHop, @(r) cellfun(@(m) ~isempty(m), ...
    regexp(r.name, ['caffenet_fc7.*_t' ...
    timesteps2regexp(timestepsHopCorrelation)]))), ...
    timeResultsRnn);%, ...
    %timeResultsRnnTrain1Category);

figures = NaN(0);
%% tsne vs time
figures(end + 1) = figure('Name', '6B-tsne_vs_time');
dataset = load('data/data_occlusion_klab325v2.mat');
dataset = dataset.data;
dataSelection = 1:size(dataset, 1);
featureProviderFactory = FeatureProviderFactory(dataset, dataSelection);
featureExtractors = {...
    featureProviderFactory.get(AlexnetFc7Features()), ...
    featureProviderFactory.get(HopFeatures(16, BipolarFeatures(0, AlexnetFc7Features()))), ...
    featureProviderFactory.get(HopFeatures(256, BipolarFeatures(0, AlexnetFc7Features()))); ...
    featureProviderFactory.get(AlexnetFc7Features()), ...
    RnnFeatureProvider(dataset, RnnFeatures(2, [])), ...
    RnnFeatureProvider(dataset, RnnFeatures(4, [])); ...
    featureProviderFactory.get(AlexnetFc7Features()), ...
    RnnFeatureProvider(dataset, RnnTrain1CategoryFeatures(2, 1)), ...
    RnnFeatureProvider(dataset, RnnTrain1CategoryFeatures(4, 1)); ...
    };
plotWholeVsOccludedTsne(featureExtractors);

%% performances
% vs visibility
figures(end + 1) = figure('Name', '6C-performance_vs_visibility');
displayResults(visibilityResults);
% vs time
figures(end + 1) = figure('Name', '6D-performance_vs_time');
plotOverallPerformanceOverTime(timeResults);

%% correlations vs time
% overall
if ~exist('corrData', 'var')
    corrData = collectModelHumanCorrelationData(correlationExemplarResults);
end
figures(end + 1) = figure('Name', '6E-correlation_vs_time');
plotCorrelationOverTime(corrData);
% exemplars
figure('Name', '6ES1-similarity_exemplars');
plotExemplarCorrelationsOverTime(corrData);

%% correspondence vs time correct
% overall
figures(end + 1) = figure('Name', '6FA-correspondence_vs_time (correct)');
plotCorrespondenceOverTime(timeResults, 'correct', 'correct');
% exemplar confusion matrices
figures(end + 1) = figure('Name', '6FAS1-confusion_exemplars (correct)');
plotConfusionMatricesOverTime(correlationExemplarResults, ...
    'correct', 'correct', {'N', 'C'});
%% correspondence vs time response
% overall
figures(end + 1) = figure('Name', '6FB-correspondence_vs_time (response)');
plotCorrespondenceOverTime(timeResults, 'response', 'response_category');
% exemplar confusion matrices
figures(end + 1) = figure('Name', '6FBS1-confusion_exemplars (response)');
plotConfusionMatricesOverTime(correlationExemplarResults, ...
    'response', 'response_category');

%% save figures
for fig = figures
    saveFile = ['figures/', get(fig, 'Name')];
    saveas(fig, saveFile);
    saveas(fig, saveFile, 'epsc');
end
end
